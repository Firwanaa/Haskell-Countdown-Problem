#+TITLE: Programming in Haskell - Ch9
#+AUTHOR: Firwanaa
#+PROPERTY: header-args :tangle code.hs
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#imports][Imports]]
- [[#arithmetic-operators][Arithmetic operators]]
- [[#valid-function][Valid function]]
- [[#apply-function][Apply function]]
- [[#declare-type-expr][Declare Type: Expr]]
- [[#values-function][Values function]]
- [[#eval-function][Eval function]]
- [[#combinatorial-functions][Combinatorial functions]]
  - [[#subs-function][Subs function]]
  - [[#interleave-function][Interleave function]]
  - [[#perms-function][Perms function]]
  - [[#choices-function][Choices function]]
- [[#formalizing-the-problem][Formalizing the problem]]
- [[#brute-force-solution][Brute Force solution]]
  - [[#split-function][Split function]]
  - [[#exprs-function][Exprs function]]
  - [[#combine-function][Combine function]]
  - [[#solutions-function][Solutions function]]
- [[#optimization][Optimization]]
- [[#more-optimization--exploiting-algebraic-properties][More optimization | Exploiting algebraic properties]]
- [[#performance-testing][Performance testing]]
- [[#combining-generation-and-evaluation][Combining generation and evaluation]]

* Imports
#+begin_src haskell
module Main where

import Data.List
import System.IO
#+end_src


* Arithmetic operators
#+begin_src haskell
data Op = Add | Sub | Mul | Div

instance Show Op where
  show Add = "+"
  show Sub = "-"
  show Mul = "*"
  show Div = "/"
#+end_src
* Valid function
Testing if two positive integer numbers operations gives another positive natural number
#+begin_src haskell
-- valid :: Op -> Int -> Int -> Bool
-- valid Add _ _ = True
-- valid Sub x y = x > y
-- valid Mul _ _ = True
-- valid Div x y = x `mod` y ==p 0
#+end_src

* Apply function
Apply function to perform the valid operations
#+begin_src haskell
apply :: Op -> Int -> Int -> Int
apply Add x y = x + y
apply Sub x y = x - y
apply Mul x y = x * y
apply Div x y = x `div` y
#+end_src
* Declare Type: Expr
Declare type of numeric expressions

#+begin_src haskell
data Expr = Val Int | App Op Expr Expr

instance Show Expr where
  show (Val n) = show n
  show (App o l r) = brak l ++ show o ++ brak r
    where
      brak (Val n) = show n
      brak e = "(" ++ show e ++ ")"
#+end_src

* Values function
Function returns the list of values in expression
#+begin_src haskell
values :: Expr -> [Int]
values (Val n) = [n]
values (App _ l r) = values l ++ values r
#+end_src
* Eval function
Eval function: returns the over all value of an expressoin is positive natural number
#+begin_src haskell
eval :: Expr -> [Int]
eval (Val n) = [n | n > 0]
eval (App o l r) =
  [ apply o x y | x <- eval l, y <- eval r, valid o x y]
-- > eval (App Add (Val 2) (Val 3))
-- > [5]
#+end_src

* Combinatorial functions
Define a number of useful combinatorial functions that return all possible
lists that satisfy certain properties.
** Subs function
#+begin_src haskell
subs :: [a] -> [[a]]
subs [] = [[]]
subs (x : xs) = yss ++ map (x :) yss
  where
    yss = subs xs
-- subs: gives all possible combinations
-- > subs [1,2,3]
--   [[],[3],[2],[2,3],[1],[1,3],[1,2],[1,2,3]]
#+end_src
** Interleave function
#+begin_src haskell
interleave :: a -> [a] -> [[a]]
interleave x [] = [[x]]
interleave x (y : ys) = (x : y : ys) : map (y :) (interleave x ys)
-- interleave: all possible ways to insert element into a list
-- > interleave 9 [1,2,3]
--   [[9,1,2,3],[1,9,2,3],[1,2,9,3],[1,2,3,9]
#+end_src

** Perms function
#+begin_src haskell
perms :: [a] -> [[a]]
perms [] = [[]]
perms (x : xs) = concat (map (interleave x) (perms xs)) -- ðŸ¤¯
-- perms: returns all permutations of a list --
-- > perms [1,2,3]
--   [[1,2,3],[2,1,3],[2,3,1],[1,3,2],[3,1,2],[3,2,1]]
#+end_src

** Choices function
#+begin_src haskell
-- function returns all choices
choices :: [a] -> [[a]]
choices = concatMap perms . subs -- concat . map perms . subs
-- Break down choices
-- > subs [1,2]
--   [[],[2],[1],[1,2]]
-- > map perms $ [[],[2],[1],[1,2]]
--   [[[]], [[2]], [[1]], [[1, 2], [2, 1]]]
-- > concat [[[]],[[2]],[[1]],[[1,2],[2,1]]]
--   [[],[2],[1],[1,2],[2,1]]

#+end_src


* Formalizing the problem
#+begin_src haskell
solution :: Expr -> [Int] -> Int -> Bool
solution e ns n =
        elem (values e) (choices ns) && eval e == [n]
-- testing
-- breaking down (1 + 50) * (25 - 10)
left = App Add (Val 1) (Val 50)
right = App Sub (Val 25) (Val 10)
e = App Mul left right -- (1 + 50) * (25 - 10)
numlst::[Int]
numlst = [1,3,7,10,25,50]
targetnum = 765

-- > solution e numlst 765
--   True

-- lets break down "solution e numlst 765"
-- > valueslist values e
--   [1,50,25,10]
-- > choiceslist = choices numlst
--   huge list
-- > elem valueslist choiceslist
--   True
-- > eval e
--   [765]
-- > eval e == targetnum
--   True
#+end_src

* Brute Force solution
First approach is to generate all possible expressions over a given list of numbers

** Split function
Return all possible ways of splitting a list into two non-empty lists that append to give original list
#+begin_src haskell
split :: [a] ->  [([a], [a])]
split [] = []
split [_] = []
split (x:xs) = ([x], xs) : [(x:ls,rs) | (ls,rs) <- split xs]
-- > split [1,2,3,4]
-- [([1],[2,3,4]),([1,2],[3,4]),([1,2,3],[4])]
#+end_src

** Exprs function
Function will return all possible expressions
#+begin_src haskell
exprs :: [Int] -> [Expr]
exprs [] = []
exprs [n] = [Val n]
exprs ns = [e | (ls,rs) <- split ns,
              l <- exprs ls,
              r <- exprs rs,
              e <- combine l r]
#+end_src

** Combine function
#+begin_src haskellE
combine :: Expr -> Expr -> [Expr]
combine l r = [App o l r | o <- ops]

ops :: [Op]
ops = [Add, Sub, Mul, Div]
#+end_src

** Solutions function
Function that returns all possible expressions that solve an instance of the countdown problem
#+begin_src haskell
solutions :: [Int] -> Int -> [Expr]
solutions ns n = [e | ns' <- choices ns, e <- exprs ns', eval e == [n]]
#+end_src

* Optimization
#+begin_src haskell
type Result = (Expr, Int)

results :: [Int] -> [Result]
results [] = []
results [n] = [(Val n,n) | n > 0]
results ns = [res | (ls,rs) <- split ns,
                     lx     <- results ls,
                     ry     <- results rs,
                     res    <- combine' lx ry]

combine' :: Result -> Result -> [Result]
combine' (l,x) (r,y) = [(App o l r, apply o x y) | o <- ops, valid o x y]


solutions' :: [Int] -> Int -> [Expr]
solutions' ns n = [e | ns' <- choices ns, (e,m) <- results ns', m == n]
#+end_src

* More optimization | Exploiting algebraic properties
Many resulted expressions will be essentially the same:

#+begin_src haskell
-- x + y == y + x
-- x * y == y * x
-- x * 1 == x
-- 1 * y == y
-- x / 1 == x

-- modify valid function
valid :: Op -> Int -> Int -> Bool
valid Add x y = x <=y
valid Sub x y = x > y
valid Mul x y = x /= 1 && y/= 1 && x <= y
valid Div x y = y /= 1 && x `mod` y == 0
#+end_src

* Performance testing
#+begin_src haskell
main :: IO ()
-- main = print (solutions [1,3,7,10,25,50] 765) -- will take longer time
main = print (solutions' [1,3,7,10,25,50] 765) -- fast

#+end_src
* Combining generation and evaluation
